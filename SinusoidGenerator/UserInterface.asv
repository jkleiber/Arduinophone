function varargout = UserInterface(varargin)
% USERINTERFACE MATLAB code for UserInterface.fig
%      USERINTERFACE, by itself, creates a new USERINTERFACE or raises the existing
%      singleton*.
%
%      H = USERINTERFACE returns the handle to a new USERINTERFACE or the handle to
%      the existing singleton*.
%
%      USERINTERFACE('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in USERINTERFACE.M with the given input arguments.
%
%      USERINTERFACE('Property','Value',...) creates a new USERINTERFACE or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before UserInterface_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to UserInterface_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help UserInterface

% Last Modified by GUIDE v2.5 21-Nov-2017 17:02:55

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @UserInterface_OpeningFcn, ...
                   'gui_OutputFcn',  @UserInterface_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
end

%Convert NaN to 0
function d = deNaN(num)
% Function to remove NaN values and set them to zero
% num: potential value that could be NaN
%
% Returns:
% d: either the value was not NaN and it is returned, or the value vas NaN,
% so 0 is returned

    if isnan(num)
        d = 0; %Set to 0 if num = NaN
    else
        d = num; %Set to input value if not NaN
    end
end

%Bandstop filter
function B = bandstop(P, f)
% This function implements a bandstop filter. Our microphone cannot read
% frquencies under 100Hz, however the FFT will detect some noise as under
% 100Hz. Therefore, these values need to be attenuated before output to the
% lights
%
% Arguments:
%   P: Power spectrum (amplitude)
%   f: frequency where amplitude occurs
%
%Returns:
%   B: the power spectrum after the bandstop filter has been applied.

    %Set index to 1
    ii = 1;
    
    %While the frequency is less than 100Hz...
    while f(ii) < 100
        P(ii) = 0; %set power to 0
        ii = ii + 1;%increment index
    end
    
    B = P; %Return the new power spectrum
end

%Create a test signal to make sure our hardware will work
function [xx, tt] = generateSignal(handles)
    %Create a time domain signal at 1000 Hz sampling frequency
    tt = 0:0.001:1;

    %Get the first amplitude, frequency and phase
    A1 = deNaN(str2double(get(handles.editAmp1, 'String')));
    P1 = deNaN(str2double(get(handles.editPhs1, 'String')));
    F1 = deNaN(str2double(get(handles.editFreq1, 'String')));
    
    %Get the second amplitude, frequency and phase
    A2 = deNaN(str2double(get(handles.editAmp2, 'String')));
    P2 = deNaN(str2double(get(handles.editPhs2, 'String')));
    F2 = deNaN(str2double(get(handles.editFreq2, 'String')));
    
    %Get the third amplitude, frequency and phase
    A3 = deNaN(str2double(get(handles.editAmp3, 'String')));
    P3 = deNaN(str2double(get(handles.editPhs3, 'String')));
    F3 = deNaN(str2double(get(handles.editFreq3, 'String')));
    
    %Construct a sinusoid from the three component sinusoids
    xx = A1*cos(2*pi*F1*tt + P1) + A2*cos(2*pi*F2*tt + P2) + A3*cos(2*pi*F3*tt + P3);
end

%Fast Fourier Transform:
%Credit to: https://www.mathworks.com/help/matlab/ref/fft.html
%for teaching us how to do this
function [P, f] = transform(data, fsamp)
%This function finds the frequency domain representation of an input signal
%and returns a single sided spectrum analysis. This will be used by the
%LEDs to choose the color
%
%Arguments:
%   data: the decibel inputs
%   fsamp: the sampling frequency
%
%Returns:
%   P: amplitudes of all signals
%   f: frequencies where the amplitudes occur

    signal = detrend(data, 0);%Remove trending from the signal (set the middle value to 0)
    len = length(signal); %Get signal length
    Y = fft(signal); %Perform the fast fourier transform
    
    P2 = abs(Y/len); %Get the magnitude of the fourier transform
    P1 = P2(1:floor(len/2)+1); %Set the negative side to be the positive side
    P1(2:end-1) = 2*P1(2:end-1); %Double amplitude to merge values to single side
    
    f = fsamp*(0:(len/2))/len; %Find the possible frequencies for the FFT
    P = bandstop(P1, f); %Apply a bandstop filter to clear the incorrect frequencies
end

%3 point averaging filter
function f = avg_filter(data)
    detrend(data,0); %trend the data to zero to avoid weird offsetting
    bk = (1/3) * ones(3, 1); %apply the 3 point filter coefficients
    f = filter(bk, 1, data); %apply the filter
end

%Chooses the color of the LED output
function C = chooseColor(P, ff, fsamp)
%This function takes the single sided spectrum as input, and returns the
%correct color for the lights to output to

    %Find the top frequencies that the signal produces
    [pp, f] = findpeaks(P, ff, 'SortStr', 'descend');
    
    %Set the RGB to [1 1 1], or black (off)
    C = ones(1,3);
    topFreq = 0; %set top frequency to default
    topAmp = 0; %set top amplitude to default
    
    %loop through the best frequencies
    for fs = 1:length(f)
        if f(fs) > 100 %only consider a frequency greater than 100 Hz (readable)
            topFreq = f(fs); %set as top frequency
            topAmp = pp(fs); %Set as top amplitude
            break; %break out of the loop if acceptable value found
        end
    end
    
    R = [0.9, 0.1, 0.1]; %Red
    O = [0.9, 0.5, 0.1]; %Orange
    Y = [0.9, 0.9, 0]; %Yellow
    G = [0.1, 0.9, 0.1]; %Green
    B = [0.25, 0.25, 0.9]; %Blue
    I = [0.5, 0.1, 0.9]; %Indigo
    V = [0.9, 0.1, 0.9]; %Violet
    
    %Colors form a lookup table
    COLORS = [R; O; Y; G; B; I; V];
    
    %The size of each region in the table should be determined by the
    %usable frequency region
    stepSize = ((fsamp-100)*1/(2*7));
    
    %Go through the values until we find the correct region
    for i=1:7
       if topFreq < stepSize*i %if we are in the right region
           C = COLORS(i, :);%set C to the corresponding color
           break; %break the loop
       end
    end
    
    %Disregard all amplitudes less than 0.1 (background noise)
    if topAmp < 0.1
        C = [0, 0, 0]; %Color will be OFF
    end

end

%Updates the Sinusoid, frequency spectrum and color output
function cc = updateParams(handles)
%Updates the GUI, while also selecting the output color and doing all the
%required transforms, filters and plotting
%
%Arguments:
%   handles: the GUI controls
%Returns:
%   cc: color output

    %Set axes1 as the active plot
    axes(handles.axes1);
    cla; %Clear the plot

    %Set sampling frequency to 1000Hz
    fsamp = 1000;

    %Get generated signal from the given inputs
    [xx, tt] = generateSignal(handles);

    %Plot the input signal in red on the axes1 plot
    plot(tt, xx, 'red')

    xlabel('t (sec)') %Set X axis to time
    ylabel('Amplitude (Volts)') %Set the amplitude to volts
    title('Sinusoidal Waveform Input V(t)') %Set the title

    %Set the active plot to axes2
    axes(handles.axes2);
    cla;%Clear the plot

    [P, f] = transform(xx(1:100), fsamp); %perform the Fast Fourier Transform
    
    %Plot the single sided spectrum
    plot(f, P, 'red')
    
    
    xlabel('f (Hz)')%Set the X axis to frequency
    ylabel('Amplitude (Volts)')%Set the Y axis to Volts
    title('Single-Sided Amplitude Spectrum of V(t)')%Set the title

    cc = chooseColor(P, f, fsamp);%Find the color output using the chooseColor function
end

% --- Executes just before UserInterface is made visible.
function UserInterface_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to UserInterface (see VARARGIN)

% Choose default command line output for UserInterface
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% This sets up the initial plot - only do when we are invisible
% so window can get raised using UserInterface.
if strcmp(get(hObject,'Visible'),'off')
    [xx,tt] = generateSignal(handles); %generate the 0 signal to start
    axes(handles.axes1); %Set the axes1 to active
    plot(tt, xx, 'red')%plot the flat line in red
    xlabel('t (sec)')%Set X label
    ylabel('Amplitude (Volts)')%Set Y label
    title('Sinusoidal Waveform Input V(t)')%Set title label
    
    axes(handles.axes2); %Set the axes2 plot to active
    plot(tt, xx, 'red')%Plot the nothing plot in red
    xlabel('f (Hz)')%Frequency on X
    ylabel('Amplitude (Volts)')%Amplitude on Y
    title('Single-Sided Amplitude Spectrum of V(t)')%Set title
    
    axes(handles.colorBox);%Show colorbox as active
    plot(0);%Plot nothing
    title('Color Output');%Set the title
end

% UIWAIT makes UserInterface wait for user response (see UIRESUME)
% uiwait(handles.figure1);
end

% --- Executes on button press in btnUpdate.
function btnUpdate_Callback(hObject, eventdata, handles)
% hObject    handle to btnUpdate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
    %Set the colors by calling updateParams
    cc = updateParams(handles);

    %Set the active axes to colorBox
    axes(handles.colorBox);
    set(handles.colorBox, 'Color', cc);%Set the color accordingly
end

% --- Executes on button press in btnArduino.
function btnArduino_Callback(hObject, eventdata, handles)
% hObject    handle to btnArduino (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
    button_state = get(hObject,'Value');
    if button_state == get(hObject,'Max')
        % Setup the arduino
        a = arduino('COM11', 'Uno', 'Libraries', 'Adafruit/NeoPixel');
        
        %Setup the light strip. We have 24 RGB lights
        lights = addon(a, 'Adafruit/NeoPixel', 'D6', 24, 'NeoPixelType', 'RGB');
    
        %Update this button to be a stop button
        set(hObject, 'String', "Stop Arduino Output");
        set(hObject, 'BackgroundColor', [1 0 0]); %Background color set to Red
        
        %Run this loop until the toggle button is untoggled
        while true
            cc = updateParams(handles);%determine the color and update sinsoids in real time
            writeColor(lights, 1:24, cc); %Write the determined co
            set(handles.colorBox, 'Color', cc);
            
            pause(0.5);
            
            button_state = get(hObject,'Value');
            if button_state == get(hObject,'Min')
                set(hObject, 'String', "Run on Arduino");
                set(hObject, 'BackgroundColor', [0.47 0.67 0.19]);
                clear a
                break;
            end
        end
    elseif button_state == get(hObject,'Min')
        clear a
    end

end


% Everything beyond this point is Auto-generated MATLAB Code for GUIs
% We used the 'guide' command to create this User Interface, and all of this
% code was created by that command.




% --- Outputs from this function are returned to the command line.
function varargout = UserInterface_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;
end

% --------------------------------------------------------------------
function FileMenu_Callback(hObject, eventdata, handles)
% hObject    handle to FileMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
end

% --------------------------------------------------------------------
function OpenMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to OpenMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
    file = uigetfile('*.fig');
    if ~isequal(file, 0)
        open(file);
    end
end

% --------------------------------------------------------------------
function PrintMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to PrintMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
printdlg(handles.figure1)
end

% --------------------------------------------------------------------
function CloseMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to CloseMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
selection = questdlg(['Close ' get(handles.figure1,'Name') '?'],...
                     ['Close ' get(handles.figure1,'Name') '...'],...
                     'Yes','No','Yes');
if strcmp(selection,'No')
    return;
end

delete(handles.figure1)
end

function editAmp1_Callback(hObject, eventdata, handles)
% hObject    handle to editAmp1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAmp1 as text
%        str2double(get(hObject,'String')) returns contents of editAmp1 as a double
end

% --- Executes during object creation, after setting all properties.
function editAmp1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAmp1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editPhs1_Callback(hObject, eventdata, handles)
% hObject    handle to editPhs1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editPhs1 as text
%        str2double(get(hObject,'String')) returns contents of editPhs1 as a double
end

% --- Executes during object creation, after setting all properties.
function editPhs1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editPhs1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editFreq1_Callback(hObject, eventdata, handles)
% hObject    handle to editFreq1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editFreq1 as text
%        str2double(get(hObject,'String')) returns contents of editFreq1 as a double
end

% --- Executes during object creation, after setting all properties.
function editFreq1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editFreq1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editAmp2_Callback(hObject, eventdata, handles)
% hObject    handle to editAmp2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAmp2 as text
%        str2double(get(hObject,'String')) returns contents of editAmp2 as a double
end

% --- Executes during object creation, after setting all properties.
function editAmp2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAmp2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editPhs2_Callback(hObject, eventdata, handles)
% hObject    handle to editPhs2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editPhs2 as text
%        str2double(get(hObject,'String')) returns contents of editPhs2 as a double
end

% --- Executes during object creation, after setting all properties.
function editPhs2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editPhs2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editFreq2_Callback(hObject, eventdata, handles)
% hObject    handle to editFreq2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editFreq2 as text
%        str2double(get(hObject,'String')) returns contents of editFreq2 as a double
end

% --- Executes during object creation, after setting all properties.
function editFreq2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editFreq2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editAmp3_Callback(hObject, eventdata, handles)
% hObject    handle to editAmp3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAmp3 as text
%        str2double(get(hObject,'String')) returns contents of editAmp3 as a double
end

% --- Executes during object creation, after setting all properties.
function editAmp3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAmp3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end

function editPhs3_Callback(hObject, eventdata, handles)
    % hObject    handle to editPhs3 (see GCBO)
    % eventdata  reserved - to be defined in a future version of MATLAB
    % handles    structure with handles and user data (see GUIDATA)

    % Hints: get(hObject,'String') returns contents of editPhs3 as text
    %        str2double(get(hObject,'String')) returns contents of editPhs3 as a double
end

% --- Executes during object creation, after setting all properties.
function editPhs3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editPhs3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end


function editFreq3_Callback(hObject, eventdata, handles)
% hObject    handle to editFreq3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editFreq3 as text
%        str2double(get(hObject,'String')) returns contents of editFreq3 as a double
end

% --- Executes during object creation, after setting all properties.
function editFreq3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editFreq3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
end